. "$(dirname -- "$0")/_/husky.sh"

# Get commit message from COMMIT_EDITMSG
commit_msg=$(cat .git/COMMIT_EDITMSG)

# Function to check if commit message matches pattern
check_commit_type() {
    echo "$commit_msg" | grep -E "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+"
}

# Get staged files
staged_files=$(git diff --cached --name-only)

# Initialize flags
run_lint=false
run_types=false
run_tests=false
run_format=false

# Function to determine which checks to run based on commit type
determine_checks() {
    if echo "$commit_msg" | grep -q "^docs:"; then
        run_format=true
    elif echo "$commit_msg" | grep -q "^style:"; then
        run_lint=true
        run_format=true
    elif echo "$commit_msg" | grep -q "^test:"; then
        run_tests=true
    else
        # Default behavior for other types (refactor, chore, etc.)
        run_lint=true
        run_types=true
        run_format=true
        run_tests=true
    fi
}

# Check if commit message follows convention
if ! check_commit_type; then
    echo "❌ Invalid commit message format."
    echo "Please use format: type(scope?): message"
    echo "Types: feat, fix, docs, style, refactor, test, chore"
    exit 1
fi

# Determine which checks to run
determine_checks

# Run checks based on commit type
if [ "$run_lint" = true ]; then
    echo "🔍 Running lint..."
    pnpm lint || exit 1
fi

if [ "$run_types" = true ]; then
    echo "📝 Checking types..."
    pnpm types || exit 1
fi

if [ "$run_tests" = true ]; then
    echo "🧪 Running tests..."
    pnpm test || exit 1
fi

if [ "$run_format" = true ]; then
    echo "✨ Formatting code..."
    pnpm format || exit 1
fi

# Check if formatting made any changes
if ! git diff --staged --quiet; then
    echo "📝 Changes detected after formatting. Staging formatted files..."
    git add .
fi

echo "✅ Pre-commit checks passed!"
exit 0
